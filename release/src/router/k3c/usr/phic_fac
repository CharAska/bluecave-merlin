#!/bin/sh
######################################################################
# Copyright (C) 2016. Shanghai Feixun Communication Co.,Ltd.
#
# DISCREPTION   : 产测相关命令
# AUTHOR        : jiajian.lv <jiajian.lv@phicomm.com.cn>
# CREATED DATE  : 2017-01-24
# MODIFIED DATE :
######################################################################

. /lib/functions.sh

#set -xv
set -e

trap abort EXIT INT TERM

log()
{
    echo "[@] $@"
}

abort()
{
    echo "Test=NG"
    log "Aborted!"
    trap - EXIT
    exit 1
}

mac_print()
{
    mac_val=`ifconfig | grep $1 | sed -e "s/  */ /g" | cut -d " " -f 5`
    if [ -n $mac_val ]; then
        echo $2=$mac_val
    else
        echo $2=NG
    fi
}

usage(){
    log "Usage:"
    log "  $0 [OPERATION] <COMMAND...>"
    log ""
    log "  OPERATION"
    log "     -g              get operation"
    log "     -s              set operation"
    log "     -t              test operation"
    log "     -h              display this help"
    log "  COMMANDS, with supported operation in [ ]"
    log "     mac             WAN mac.[gs]"
    log "                     e.g. $0 -s mac 8c:ab:8e:98:40:a8"
    log "     product         product name[g]"
    log "     fw_ver          firmware version[g]"
    log "     hw_ver          hardware version[g]"
    log "     ip <wan/lan>    IP address[gs]"
    log "     restore_reboot  restore to factory settings, then reboot[N/A]"
    log "     restore         restore to factory[N/A]"
    log "     2.4g-ch <1/6/11>          2.4GHz channel[gs]"
    log "     2.4g-ssid <xxx>           2.4GHz ssid[g]"
    log "     5.8g-ch <36/48/161>       5GHz channel[gs]"
    log "     5.8g-ssid <xxx>           5GHz ssid[g]"
    log "     fac_mode <Y/N>            factory mode flag[gs]"
    log "     2.4g_insmod               insmod 2.4g lkm[N/A]"
    log "     5.8g_insmod               insmod 5.8g lkm[N/A]"
    log "     led=[yellow|blue|red]     led test[s]"
    log "     usb                       test usb[t]"
    log "     2.0_usb                   test usb2.0[t]"
    log "     3.0_usb                   test usb3.0[t]"
}

OP=
HELP=0

while [[ -n "$1" ]]; do
    case "$1" in
        -g) OP="get";;
        -s) OP="set";;
        -t) OP="test";;
        -h) HELP=1; break;;
        -*)
            log "Invalid option: $1"
            exit 1;;
        *) break;;
    esac
    shift;
done

if [[ -z "$*" -o "$HELP" -gt 0 ]]; then
    usage
    trap - EXIT
    exit 1
fi

case "$1" in
    mac)
        if [[ "$OP" = "get" ]]; then
            echo "MAC=`uboot_env --get --name ethaddr`"
        fi
        if [[ "$OP" = "set" ]]; then
            if [[ -n "$2" ]]; then
                MAC_UPPERCASE=$(echo $2 | tr '[a-z]' '[A-Z]')
                uboot_env --set --name ethaddr --value $MAC_UPPERCASE
                echo "Test=OK"
                #upgrade mac_set $MAC_UPPERCASE no_reboot
            else
                echo "Test=NG"
            fi
        fi
        break;;
    wan_mac)
        if [[ "$OP" = "get" ]]; then
            mac_print "eth1" "WAN_MAC"
        fi
        break;;
    lan_mac)
        if [[ "$OP" = "get" ]]; then
            mac_print "br-lan" "LAN_MAC"
        fi
        break;;
    2.4g_mac)
        if [[ "$OP" = "get" ]]; then
            mac_print "wlan1" "2G_MAC"
        fi
        break;;
    5.8g_mac)
        if [[ "$OP" = "get" ]]; then
            mac_print "wlan0" "5G_MAC"
        fi
        break;;
    2.4g-ch)
        if [[ "$OP" = "get" ]]; then
            echo "2.4g-ch=`iwlist wlan1 ch |grep "Current Channel" |awk -F '=' '{print $2}'`"
        fi

        if [[ "$OP" = "set" ]]; then
            if [[ -n "$2" ]]; then
                sh /etc/fastmode/set_ch.sh 2g $2
            else
                echo "Test=NG"
            fi
        fi
        break;;
    2.4g-ssid)
        if [[ "$OP" = "get" ]]; then
            echo "2.4g-ssid=`iwconfig wlan1 | grep wlan1 | awk -F '"' '{print $2}'`"
        fi
        break;;
    5.8g-ch)
        if [[ "$OP" = "get" ]]; then
            echo "5.8g-ch=`iwlist wlan0 ch |grep "Current Channel" |awk -F '=' '{print $2}'`"
        fi

        if [[ "$OP" = "set" ]]; then
            if [[ -n "$2" ]]; then
                sh /etc/fastmode/set_ch.sh 5g $2
           else
                echo "Test=NG"
            fi
        fi
        break;;
    5.8g-ssid)
        if [[ "$OP" = "get" ]]; then
            echo "5.8g-ssid=`iwconfig wlan0 | grep wlan0 | awk -F '"' '{print $2}'`"
        fi
        break;;
	fac_mode)
		if [[ "$OP" = "get" ]]; then
			result=$(hexdump -s 0x60 /dev/mtd6 -n 2|grep 000060|awk {'print $2'})
			if [ $result == "1070" ]; then
				echo "fac_mode=Y"
			else
				echo "fac_mode=N"
			fi
		fi
        if [[ "$OP" = "set" ]]; then
            if [[ -n "$2" ]]; then
				if [[ "$2" = "N" ]]; then
					lua /etc/fastmode/restore.lua
				fi
			fi
        fi
        break;;
	2.4g_insmod)
		sh /etc/fastmode/runwifi.sh 2g
		echo "Test=OK"
        break;;
	5.8g_insmod)
		sh /etc/fastmode/runwifi.sh 5g
		echo "Test=OK"
        break;;
	wifi_insmod)
		sh /etc/fastmode/runwifi.sh wifi
		echo "Test=OK"
        break;;
    product)
        if [[ "$OP" = "get" ]]; then
            echo "product=K3C"
        fi
        break;;
    fw_ver)
        if [[ "$OP" = "get" ]]; then
            echo "fw_ver=`uci get system.sys.fw_ver`"
        fi
        break;;
    hw_ver)
        if [[ "$OP" = "get" ]]; then
            echo "hw_ver=`uci get system.sys.hw_ver`"
        fi
        break;;
    ip)
        if [[ "$OP" = "get" ]]; then
            case "$2" in
                wan)
                    ip_wan=$(ifconfig | grep Bcast | sed -n 2p | cut -d ':' -f 2 | cut -d ' ' -f 1)
                    if [ -n "$ip_wan" ]; then
                        echo "ip.wan=$ip_wan"
                    else
                        echo "ip.wan=0.0.0.0"
                    fi
                    break;;
                lan)
                    ip_lan=$(ifconfig | grep Bcast | sed -n 1p | cut -d ':' -f 2 | cut -d ' ' -f 1)
                    if [ -n "$ip_lan" ]; then
                        echo "ip.lan=$ip_lan"
                    else
                        echo "ip.lan=0.0.0.0"
                    fi
                    break;;
                *)
                    exit 1
            esac
        fi
        if [[ "$OP" = "set" ]]; then
            case "$2" in
                lan)
                    if [[ -n "$3" ]]; then
                        clish -c "configure lan" -c "set interface br-lan ip $3" > /dev/null 2>&1
                        echo "Test=OK"
                    else
                        echo "Test=NG"
                    fi
                    break;;
                *)
                    exit 1
            esac
        fi
        break;;
    restore_reboot)
        echo "Test=OK"
        factorycfg.sh -a
        break;;
    restore)
        echo "Test=OK"
        factorycfg.sh -a notreboot
        break;;
    led=open)
        if [[ "$OP" = "set" ]]; then
            sh /etc/fastmode/led4fastmode.sh open
            echo "Test=OK"
        fi
        break;;
    led=close)
        if [[ "$OP" = "set" ]]; then
            sh /etc/fastmode/led4fastmode.sh close
            echo "Test=OK"
        fi
        break;;
    led)
        if [[ "$OP" = "get" ]]; then
            sh /etc/fastmode/led4fastmode.sh read
        fi
        break;;
    led=red)
        if [[ "$OP" = "set" ]]; then
            echo "Test=OK"
            gpio.sh red 0
        fi
        break;;
    led=blue)
        if [[ "$OP" = "set" ]]; then
            echo "Test=OK"
            gpio.sh blue 0
        fi
        break;;
    led=yellow)
        if [[ "$OP" = "set" ]]; then
            echo "Test=OK"
            gpio.sh yellow 0
        fi
        break;;
    usb)
        if [[ "$OP" = "test" ]]; then
            usb_test="`ls /mnt/usb/* 2>/dev/null`"
            if [[ -n "$usb_test" ]]; then
                ver=`sed -n '/Cnt=0[^0]/,/Manufacturer=[^Linux]/p' /sys/kernel/debug/usb/devices |grep Ver= |awk '{print $3}'`
                val=`mem -s 0x1a40c020 -ud | awk -F: '{print $2}'`
                if [[ -z "$val" || -z "$ver" ]];then
                    echo "Test=NG"
                else
                    val_quto=$((val&0x2000))
                    if [[ $val_quto -eq 8192 ]];then
                        if [[ $ver != "2.00" ]];then
                            echo "Test=NG"
                        else
                            echo "Test=OK"
                        fi
                    else
                        if [[ ${ver:0:1} != "3" ]];then
                            echo "Test=NG"
                        else
                            echo "Test=OK"
                        fi
                    fi
                fi
            else
                echo "Test=NG"
            fi
        fi
        break;;
    2.0_usb)
        if [[ "$OP" = "test" ]]; then
            mem -s 0x16c00000 -w 0x10070000 -u > /dev/null 2>&1
            sleep 1
            mem -s 0x1a40c020 -uw 0x2000 > /dev/null 2>&1
            sleep 1
            mem -s 0x16c00000 -w 0x10070080 -u > /dev/null 2>&1
            sleep 3
            usb_2=`mem -s 0x1a40c020 -ud`
            if [[ "$usb_2" = "0x1a40c020:0x00002000" ]]; then
                echo "Test=OK"
            else
                echo "Test=NG"
            fi
        fi
        break;;
    3.0_usb)
        if [[ "$OP" = "test" ]]; then
            mem -s 0x16c00000 -w 0x10070000 -u > /dev/null 2>&1
            sleep 1
            mem -s 0x1a40c020 -uw 0x000 >/dev/null 2>&1
            sleep 1
            mem -s 0x16c00000 -w 0x10070080 -u > /dev/null 2>&1
            sleep 3
            usb_3=`mem -s 0x1a40c020 -ud`
            if [[ "$usb_3" = "0x1a40c020:0x00000000" ]]; then
                echo "Test=OK"
            else
                echo "Test=NG"
            fi
        fi
        break;;
    telnet_enable)
        if [[ "$OP" = "set" ]]; then
            if [[ "$2" = "close" ]]; then
                telnetd_startup clear > /dev/null
                echo "Test=OK"
            fi
        elif [[ "$OP" = "get" ]]; then
            telnet_state=`telnetd_startup show | cut -d " " -f3`
            if [[ "$telnet_state" = "off" ]]; then
                echo "telnet=close"
            elif [[ "$telnet_state" = "on" ]]; then
                echo "telnet=open"
            fi
        fi
        break;;
    *)
        exit 1;
esac

trap - EXIT
exit 0
