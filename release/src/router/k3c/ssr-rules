#!/bin/sh

menable=`nvram get ssr_enable`

IGNORE=/usr/sbin/ssr/ignore.list
if [ -f "/jffs/configs/ssr_user.txt" ] ;then
IGNORE2=/jffs/configs/ssr_user.txt
else
IGNORE2=/usr/sbin/ssr/ignore.user
fi
FORCE=/jffs/configs/ssr_forceip.txt
IGNORESIP=/jffs/configs/ssr_sip.txt

flush_r() {

iptables -t nat -F SHADOWSOCKS 2>/dev/null
iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS 2>/dev/null
iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS 2>/dev/null
iptables -t nat -X SHADOWSOCKS  2>/dev/null
if [ "$menable" == "0" ] ;then
ipset -X ssr 2>/dev/null
fi
ipset -X ssr_ignore 2>/dev/null

#udp
iptables -t mangle -F gameboost 
iptables -t mangle  -D PREROUTING -p udp  -j gameboost
iptables -t mangle  -X gameboost
ip rule del fwmark 0x01/0x01 table 100 
ip route del local 0.0.0.0/0 dev lo table 100 

return 0	
}

gen_iplist() {
	cat <<-EOF
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.88.99.0/24
		192.168.0.0/16
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
		$(cat ${IGNORE2:=/dev/null} 2>/dev/null)
EOF
}

gen_iplist2() {
	cat <<-EOF
		$(cat ${IGNORE:=/dev/null} 2>/dev/null)
EOF
}


# Get argument
server=$1
local_port=$2 
if [ "$server" == "clean" ] ;then
  flush_r
  exit 0
fi



[ ! -f $IGNORE ] && echo "$IGNORE not found." && exit 1

# Check variable
[ -z $server ] || [ -z $local_port ] && {
	echo "Invalid variable, please check CONFIG."
	exit 1
}

all_proxy=`nvram get ssr_mode`
dns_mode=`nvram get ssr_dnsmode`
udp_enable=`nvram get ssr_udp_enable`

# Create a new chain
BEGIN="*nat\n\
:SHADOWSOCKS - [0:0]\n\
-I PREROUTING -p tcp -j SHADOWSOCKS\n\
-I OUTPUT 1 -p tcp -j SHADOWSOCKS\n\
-A SHADOWSOCKS -d $server/32 -j RETURN\n\
"

ipset create ssr hash:net 2>/dev/null
if [ ! -f "/tmp/etc/dnsmasq.user" ] ;then
mkdir /tmp/etc/dnsmasq.user
fi
if [ "$dns_mode" = "1" ] ;then
 cp -f /usr/sbin/ssr/gfw_list.conf /tmp/etc/dnsmasq.user/gfw_list.conf
 if [ -f "/jffs/configs/ssr_gfw.txt" ] ;then
  icount=`cat /jffs/configs/ssr_gfw.txt|grep .|wc -l`
  if [ $icount -gt 0 ] ;then
   sed '/.*/s/.*/server=\/&\/127.0.0.1#1053\nipset=\/&\/ssr/' /jffs/configs/ssr_gfw.txt > /tmp/etc/dnsmasq.user/gfw_user.conf
  else
   rm -f /tmp/etc/dnsmasq.user/gfw_user.conf
  fi
 fi
else
 cp -f /usr/sbin/ssr/gfw_addr.conf /tmp/etc/dnsmasq.user/gfw_addr.conf
 if [ -f "/jffs/configs/ssr_gfw.txt" ] ;then
  icount=`cat /jffs/configs/ssr_gfw.txt|grep .|wc -l`
  if [ $icount -gt 0 ] ;then
   sed '/.*/s/.*/address=\/&\/93.46.8.89/' /jffs/configs/ssr_gfw.txt > /tmp/etc/dnsmasq.user/gfw_user.conf
  else
   rm -f /tmp/etc/dnsmasq.user/gfw_user.conf
  fi
 fi
fi
service restart_dns 2>/dev/null



/usr/sbin/ssr/ssr_mon.sh &



if [ "$all_proxy" = "1" ] ;then
if [ "$dns_mode" = "1" ] ;then
echo -e "$BEGIN\
-A SHADOWSOCKS  -p tcp -m set --match-set ssr dst  -j REDIRECT --to-ports $local_port\n\
COMMIT" | iptables-restore -n
ipset add ssr 8.8.4.4 
else
echo -e "$BEGIN\
-A SHADOWSOCKS  -p tcp -d 93.46.8.89/32  -j REDIRECT --to-ports $local_port\n\

COMMIT" | iptables-restore -n
fi
if [ -f "$IGNORESIP" ] ;then
sed "/.*/s/.*/iptables -t nat -I SHADOWSOCKS  -p tcp -s & -j RETURN  /" $IGNORESIP  2>/dev/null | sh
fi
if [ -f "$FORCE" ] ;then
sed "/.*/s/.*/iptables -t nat -A SHADOWSOCKS  -p tcp -d & -j REDIRECT --to-ports $local_port  /" $FORCE  2>/dev/null | sh
fi

#udp
if [ "$udp_enable" == "1" ] ;then
	ip rule add fwmark 0x01/0x01 table 100
	ip route add local 0.0.0.0/0 dev lo table 100
	iptables -t mangle -N gameboost
	if [ "$dns_mode" = "1" ] ;then
	iptables -t mangle -A gameboost -p udp -m set  --match-set ssr dst \
		-j TPROXY --on-port "$local_port" --tproxy-mark 0x01/0x01
	else
	iptables -t mangle -A gameboost -p udp -d 93.46.8.89/32 \
		-j TPROXY --on-port "$local_port" --tproxy-mark 0x01/0x01
	fi
	iptables -t mangle  -I PREROUTING 1 -p udp  -j gameboost
fi

exit 0
fi


ipset create ssr_ignore hash:net 2>/dev/null
echo -e "$BEGIN\n\
-A SHADOWSOCKS -m set --match-set ssr_ignore dst -j RETURN \n\
-A SHADOWSOCKS -p tcp  -j REDIRECT --to-ports $local_port\n\
COMMIT" | iptables-restore -n

if [ -f "$IGNORESIP" ] ;then
sed "/.*/s/.*/iptables -t nat -I SHADOWSOCKS  -p tcp -s & -j RETURN  /" $IGNORESIP  2>/dev/null | sh
fi

# Read the ignore list

if [ "$all_proxy" = "2" ] ;then
ipset -! -R <<-EOF || return 1
$(gen_iplist | sed -e "s/^/add ssr_ignore /")
EOF
else
ipset -! -R <<-EOF || return 1
$(gen_iplist | sed -e "s/^/add ssr_ignore /")
$(gen_iplist2 | sed -e "s/^/add ssr_ignore /")
EOF
fi

#udp
if [ "$udp_enable" == "1" ] ;then
	ip rule add fwmark 0x01/0x01 table 100
	ip route add local 0.0.0.0/0 dev lo table 100
	iptables -t mangle -N gameboost

	iptables -t mangle -A gameboost -p udp -m set ! --match-set ssr_ignore dst \
		-j TPROXY --on-port "$local_port" --tproxy-mark 0x01/0x01

	iptables -t mangle  -I PREROUTING 1 -p udp  -j gameboost
fi
exit 0



